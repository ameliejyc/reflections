What happens when you initialize a repository? Why do you need to do it?

It creates a new git repository from an existing folder of files. From creating the .git file we can now run commands such as git status in command line to view the files within the repository and start to be able to track changes/commits.

How is the staging area different from the working directory and the repository? What value do you think it offers?

Offers a precursor before committing. Allows you to reduce many files to the few you think belong in the same commit.

How can you use the staging area to make sure you have one commit per logical change?

Run git diff --staged to see what is in the staging area as a final measure before committing. Only add changes to the staging area using git add after running git diff on your changes to see which changes make sense to add to the staging area together.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

To keep test/experimental versions of your work which deviate from your master version.

How do the diagrams help you visualize the branch structure?

They help show the parents of each commit and at which point they deviate into branches. They also help show unreachable commits (i.e. commits made from a previous commit which may later be saved into a new branch.)

What is the result of merging two branches together?

One branch with the changes from both branches.

Why do we represent it in the diagram the way we do?

Because when merged, all commits from each branch will be timestamped and shown in git log (and these may run through each other).

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Git's automatic merging is faster with less margin for error.

Commands:

git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.
