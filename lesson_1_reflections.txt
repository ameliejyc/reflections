How did viewing a diff between two versions of a file help you see the bug that was introduced?

- In gitbash I could see additions and reductions of specific changes.
- In commandline I could see the sections that had been modified directly compared although it didn't point out if something had been added/taken away in the way that gitbash showed.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

- I would save time de-bugging by going to previous versions which had better working parts.
- I could get a sense of what my most common typos/errors are and work on them.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

Re-visiting changes make much more sense when commited manually as they will have annotations and be committed for specific changes, rather than having to search for a date or time when you think the change you want to re-visit might have occurred.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Git is more geared towards building coding projects where you're more likely to use a number of different file types at once.

How can you use the commands git log and git diff to view the history of files?

Run git log on your repository and then by reading the descriptions, choose two commit IDs to perform a git diff on to see the exact history.

How might using version control make you more confident to make changes that could break something?

Using version control, you're always backed up with historical versions and can revisit commits to see where the break is using git checkout.

Commands:

q |    exit git log
git log  |    List the commits and show which files have changed
git log --stat  |    Show addition information about the commits
git diff id1 id2  |    Compare two commits
git clone  |    Create a local copy/clone from the repository
git config --global color.ui auto |    get colored diff output
git checkout  |    Shows a previous version of the file. This is not a checkout to edit like in SVN or TFS!
